package edu.uncc.cs.watsonsim;

import org.apache.commons.lang3.StringEscapeUtils;


public class Passage extends Phrase {
	// Stored Fields
	public final String reference;
	public final String engine_name;
	public final String title;
	
	// Mutable
    public double[] scores = Score.empty();
    
    /**
     * Create a new Passage
     * 
     * @param engine_name  A simple lowercase string
     * @param title
     * @param text
     * @param reference   Specific to the engine, or a URL, for later lookup
     */
	public Passage(String engine_name, String title, String text, String reference) {
		super(text);
		if (engine_name == null)
			throw new NullPointerException("Engine name cannot be null.");
		if (title == null)
			throw new NullPointerException("Title cannot be null.");
		if (reference == null)
			throw new NullPointerException("Reference cannot be null.");
		
		this.reference = reference;
		this.engine_name = engine_name;
		this.title = StringEscapeUtils.unescapeXml(title);
	}
    
    /** Return the value of this Score for this answer, or null */
    public double score(String name) {
    	scores = Score.update(scores);
    	return Score.get(scores, name, -1);
    }
    
    /** Set the value of this Score for this passage, returning the passage.
     * 
     * The intended use is something like this:
     * new Passage(.......).score("SKIP_BIGRAM", 9.45).score("NGRAM", -1.2)
     * @param name
     * @param value
     */
    public Passage score(String name, double value) {
    	scores = Score.set(scores, name, value);
    	return this;
    }
	
	/******************************************************
	 * 
	 * Autogenerated hashcode() and equals() follow
	 * 
	 ******************************************************/

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((tokens == null) ? 0 : tokens.hashCode());
		result = prime * result
				+ ((engine_name == null) ? 0 : engine_name.hashCode());
		result = prime * result
				+ ((reference == null) ? 0 : reference.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Passage other = (Passage) obj;
		if (tokens == null) {
			if (other.tokens != null)
				return false;
		} else if (!tokens.equals(other.tokens))
			return false;
		if (engine_name == null) {
			if (other.engine_name != null)
				return false;
		} else if (!engine_name.equals(other.engine_name))
			return false;
		if (reference == null) {
			if (other.reference != null)
				return false;
		} else if (!reference.equals(other.reference))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}
}