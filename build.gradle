apply plugin: 'java'
//apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'download-task'

// Meta information
mainClassName = System.getProperty("mainClass")
version = "0.4.0"
group = "edu.uncc"

// Meta-dependencies (what you need so as to run this buildscript)
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:0.5'
    }
}

// Dependencies and where to get them (some are nonstandard)
repositories {
    mavenCentral()
    maven {url "https://repo.eclipse.org/content/groups/releases/"}
    maven {url "https://googledrive.com/host/0B8wOEC5-v5lXak1WSF9YRkdOZGc/"}
}

dependencies {
    // Machine learning
    compile group: "com.googlecode.jcsv",            name: "jcsv",                    version: "1.4.0"
    compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.6'
    compile group: "com.github.spullara.cli-parser", name: "cli-parser",              version: "1.1"

    // Statistics
    compile group: "com.googlecode.json-simple",     name: "json-simple",             version: "1.1"
    compile group: "org.apache.httpcomponents",      name: "fluent-hc",               version: "4.3.1"
    compile group: "org.eclipse.jgit",               name: "org.eclipse.jgit",        version: "3.2.0.201312181205-r"

    // Search Engines
    compile group: "org.apache.lucene",              name: "lucene-core",             version: "4.7.2"
    compile group: "org.apache.lucene",              name: "lucene-queryparser",      version: "4.7.2"
    compile group: "org.apache.lucene",              name: "lucene-analyzers-common", version: "4.7.2"
    compile group: "org.apache.lucene",              name: "lucene-highlighter",      version: "4.7.2"
    compile group: "lemurproject.indri",             name: "indri",                   version: "5.6"
    compile group: "com.google.api-client",          name: "google-api-client",       version: "1.17.0-rc"
    compile 'com.google.apis:google-api-services-customsearch:v1-rev34-1.17.0-rc'
    compile "com.google.http-client:google-http-client-jackson2:1.17.0-rc"
    compile "org.apache.abdera:abdera-parser:1.1.1"
    compile "org.jsoup:jsoup:1.7.3"

    // Approximate String Matching
    compile 'org.apache.commons:commons-lang3:3.2.1'

    // Indri native library
//    natives "libindri-jni:libindri-jni:5.6"
    // Sqlite native library (but it comes in a jar)
    compile "org.xerial:sqlite-jdbc:3.7.2"
    // PostgreSQL
    compile 'org.postgresql:postgresql:9.3-1101-jdbc41'
    
    // OpenNLP
    compile "org.apache.opennlp:opennlp-tools:1.5.3"

    // Stanford CoreNLP
    compile 'edu.stanford.nlp:stanford-corenlp:3.4.1'
    compile 'edu.stanford.nlp:stanford-corenlp:3.4.1:models'

    // WebDAV 
    compile 'com.github.lookfirst:sardine:5.1'
    //compile 'org.slf4j:slf4j-simple:1.6.1'
	
    // UIMA for Java
    compile group:'org.apache.uima',					name: 'uimaj-core',			version: '2.3.1'

    // lightweight web framework
    compile "com.sparkjava:spark-core:1.1.1"

    // multimaps and many other tools
    compile "com.google.guava:guava:17.0"

    compile "junit:junit:4.12"
    // Jena for SPARQL connections
    compile "org.apache.jena:apache-jena-libs:2.12.1"
    compile 'xom:xom:+'
    compile "xalan:xalan:+"
}

run {
    // Allow reading from stdin
    standardInput = System.in
    // Find Indri
    systemProperty "java.library.path", file("$projectDir/lib")
    main "uncc2014watsonsim.sources.DBIndexer"
}

task(run_cache_searches, type: JavaExec) {
    // Find Indri
    systemProperty "java.library.path", file("$projectDir/lib")
    main "uncc2014watsonsim.sources.GenerateSearchResultDataset"
}

task(run_index, type: JavaExec) {
    // Find Indri
    systemProperty "java.library.path", file("$projectDir/lib")
    main "uncc2014watsonsim.sources.DBIndexer"
}

test {
    systemProperty "java.library.path", file("$projectDir/lib")
    testLogging {
        exceptionFormat = 'full'
    }
}

eclipse {
    classpath {
        file.withXml {provider ->
            provider.asNode().findAll { it.@path.contains("indri") }.each {
                it.appendNode('attributes')
                it.children().each {
                    it.appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value: "$projectDir/lib"])
                }
            }
        }
    }
}
